# Sean: gonna work on thisfrom PIL import Imagefrom numpy import asarrayfrom sklearn.svm import SVCfrom skimage.transform import resizefrom skimage.feature import hogfrom skimage.color import rgb2greyfrom sklearn.model_selection import KFold, cross_val_score,train_test_splitfrom sklearn.metrics import accuracy_scorefrom sklearn.preprocessing import StandardScalerfrom sklearn.decomposition import PCAfrom sklearn.svm import SVCimport globimport osimport numpy as npimport pandas as pdx_test = []y_test = []x_train = []y_train = []'''print("loading test data set")# put "data" folder in the same location as your knn.py or svm.py or cnn.py# for importing testing datafor img in glob.glob("data/asl_alphabet_test/*.jpg"):    opened = Image.open(img)    into_array = asarray(opened)    resized = resize(into_array, (64, 64, 3))    x_test.append(resized)    img_name = os.path.basename(img)    if "del" in img_name:        y_test.append(0)    elif "nothing" in img_name:        y_test.append(1)    elif "space" in img_name:        y_test.append(2)    else:        y_test.append(ord(img_name[0]))print("loading train data set")# for importing training datacounter = 0for img in glob.glob("data/asl_alphabet_train/**/*.jpg", recursive=True):        opened = Image.open(img)    into_array = asarray(opened)    resized = resize(into_array, (64, 64, 3))    x_train.append(resized)    img_name = os.path.basename(img)    if "del" in img_name:        y_train.append(0)    elif "nothing" in img_name:        y_train.append(1)    elif "space" in img_name:        y_train.append(2)    else:        y_train.append(ord(img_name[0]))    counter += 1'''#https://www.kaggle.com/ayuraj/asl-dataset trying dataset with no backgroundprint("loading data set")# put "data" folder in the same location as your knn.py or svm.py or cnn.py# for importing testing datafor img in glob.glob("data/**/*.jpeg"):    opened = Image.open(img)    into_array = asarray(opened)    resized = resize(into_array, (64, 64, 3))    x_test.append(resized)    img_name = os.path.basename(img).split("_")    y_test.append(ord(img_name[1]))print("data loaded")print("spliting data")np_data = np.array(x_test)np_label = np.array(y_test)m_samples = np_data.shape[0]reshaped = np_data.reshape(m_samples, -1)X_train, X_test, Y_train, Y_test = train_test_split(reshaped, np_label, stratify=np_label, test_size=0.25)print("Start training..")svm = SVC(kernel="linear")svm.fit(X_train, Y_train)print("SVM (Linear Kernel) test set accuracy: {:.3f}".format(svm.score(X_test, Y_test)))